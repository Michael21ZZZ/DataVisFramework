{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nimport _isEqual from \"lodash/isEqual\";\nimport _isFunction from \"lodash/isFunction\";\nimport _first from \"lodash/first\";\nimport _isNil from \"lodash/isNil\";\nimport _last from \"lodash/last\";\nimport _isArray from \"lodash/isArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\n/**\n * @fileOverview Radar\n */\nimport React, { PureComponent } from 'react';\nimport Animate from 'react-smooth';\nimport classNames from 'classnames';\nimport { interpolateNumber } from '../util/DataUtils';\nimport { Global } from '../util/Global';\nimport { polarToCartesian } from '../util/PolarUtils';\nimport { getValueByDataKey } from '../util/ChartUtils';\nimport { Polygon } from '../shape/Polygon';\nimport { Dot } from '../shape/Dot';\nimport { Layer } from '../container/Layer';\nimport { LabelList } from '../component/LabelList';\nimport { filterProps } from '../util/types';\nexport var Radar = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Radar, _PureComponent);\n  var _super = _createSuper(Radar);\n  function Radar() {\n    var _this;\n    _classCallCheck(this, Radar);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isAnimationFinished: false\n    };\n    _this.handleAnimationEnd = function () {\n      var onAnimationEnd = _this.props.onAnimationEnd;\n      _this.setState({\n        isAnimationFinished: true\n      });\n      if (_isFunction(onAnimationEnd)) {\n        onAnimationEnd();\n      }\n    };\n    _this.handleAnimationStart = function () {\n      var onAnimationStart = _this.props.onAnimationStart;\n      _this.setState({\n        isAnimationFinished: false\n      });\n      if (_isFunction(onAnimationStart)) {\n        onAnimationStart();\n      }\n    };\n    _this.handleMouseEnter = function (e) {\n      var onMouseEnter = _this.props.onMouseEnter;\n      if (onMouseEnter) {\n        onMouseEnter(_this.props, e);\n      }\n    };\n    _this.handleMouseLeave = function (e) {\n      var onMouseLeave = _this.props.onMouseLeave;\n      if (onMouseLeave) {\n        onMouseLeave(_this.props, e);\n      }\n    };\n    return _this;\n  }\n  _createClass(Radar, [{\n    key: \"renderDots\",\n    value: function renderDots(points) {\n      var _this$props = this.props,\n        dot = _this$props.dot,\n        dataKey = _this$props.dataKey;\n      var baseProps = filterProps(this.props);\n      var customDotProps = filterProps(dot);\n      var dots = points.map(function (entry, i) {\n        var dotProps = _objectSpread(_objectSpread(_objectSpread({\n          key: \"dot-\".concat(i),\n          r: 3\n        }, baseProps), customDotProps), {}, {\n          dataKey: dataKey,\n          cx: entry.x,\n          cy: entry.y,\n          index: i,\n          payload: entry\n        });\n        return Radar.renderDotItem(dot, dotProps);\n      });\n      return /*#__PURE__*/React.createElement(Layer, {\n        className: \"recharts-radar-dots\"\n      }, dots);\n    }\n  }, {\n    key: \"renderPolygonStatically\",\n    value: function renderPolygonStatically(points) {\n      var _this$props2 = this.props,\n        shape = _this$props2.shape,\n        dot = _this$props2.dot,\n        isRange = _this$props2.isRange,\n        baseLinePoints = _this$props2.baseLinePoints,\n        connectNulls = _this$props2.connectNulls;\n      var radar;\n      if ( /*#__PURE__*/React.isValidElement(shape)) {\n        radar = /*#__PURE__*/React.cloneElement(shape, _objectSpread(_objectSpread({}, this.props), {}, {\n          points: points\n        }));\n      } else if (_isFunction(shape)) {\n        radar = shape(_objectSpread(_objectSpread({}, this.props), {}, {\n          points: points\n        }));\n      } else {\n        radar = /*#__PURE__*/React.createElement(Polygon, _extends({}, filterProps(this.props, true), {\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n          points: points,\n          baseLinePoints: isRange ? baseLinePoints : null,\n          connectNulls: connectNulls\n        }));\n      }\n      return /*#__PURE__*/React.createElement(Layer, {\n        className: \"recharts-radar-polygon\"\n      }, radar, dot ? this.renderDots(points) : null);\n    }\n  }, {\n    key: \"renderPolygonWithAnimation\",\n    value: function renderPolygonWithAnimation() {\n      var _this2 = this;\n      var _this$props3 = this.props,\n        points = _this$props3.points,\n        isAnimationActive = _this$props3.isAnimationActive,\n        animationBegin = _this$props3.animationBegin,\n        animationDuration = _this$props3.animationDuration,\n        animationEasing = _this$props3.animationEasing,\n        animationId = _this$props3.animationId;\n      var prevPoints = this.state.prevPoints;\n      return /*#__PURE__*/React.createElement(Animate, {\n        begin: animationBegin,\n        duration: animationDuration,\n        isActive: isAnimationActive,\n        easing: animationEasing,\n        from: {\n          t: 0\n        },\n        to: {\n          t: 1\n        },\n        key: \"radar-\".concat(animationId),\n        onAnimationEnd: this.handleAnimationEnd,\n        onAnimationStart: this.handleAnimationStart\n      }, function (_ref) {\n        var t = _ref.t;\n        var prevPointsDiffFactor = prevPoints && prevPoints.length / points.length;\n        var stepData = points.map(function (entry, index) {\n          var prev = prevPoints && prevPoints[Math.floor(index * prevPointsDiffFactor)];\n          if (prev) {\n            var _interpolatorX = interpolateNumber(prev.x, entry.x);\n            var _interpolatorY = interpolateNumber(prev.y, entry.y);\n            return _objectSpread(_objectSpread({}, entry), {}, {\n              x: _interpolatorX(t),\n              y: _interpolatorY(t)\n            });\n          }\n          var interpolatorX = interpolateNumber(entry.cx, entry.x);\n          var interpolatorY = interpolateNumber(entry.cy, entry.y);\n          return _objectSpread(_objectSpread({}, entry), {}, {\n            x: interpolatorX(t),\n            y: interpolatorY(t)\n          });\n        });\n        return _this2.renderPolygonStatically(stepData);\n      });\n    }\n  }, {\n    key: \"renderPolygon\",\n    value: function renderPolygon() {\n      var _this$props4 = this.props,\n        points = _this$props4.points,\n        isAnimationActive = _this$props4.isAnimationActive,\n        isRange = _this$props4.isRange;\n      var prevPoints = this.state.prevPoints;\n      if (isAnimationActive && points && points.length && !isRange && (!prevPoints || !_isEqual(prevPoints, points))) {\n        return this.renderPolygonWithAnimation();\n      }\n      return this.renderPolygonStatically(points);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n        hide = _this$props5.hide,\n        className = _this$props5.className,\n        points = _this$props5.points,\n        isAnimationActive = _this$props5.isAnimationActive;\n      if (hide || !points || !points.length) {\n        return null;\n      }\n      var isAnimationFinished = this.state.isAnimationFinished;\n      var layerClass = classNames('recharts-radar', className);\n      return /*#__PURE__*/React.createElement(Layer, {\n        className: layerClass\n      }, this.renderPolygon(), (!isAnimationActive || isAnimationFinished) && LabelList.renderCallByParent(this.props, points));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.animationId !== prevState.prevAnimationId) {\n        return {\n          prevAnimationId: nextProps.animationId,\n          curPoints: nextProps.points,\n          prevPoints: prevState.curPoints\n        };\n      }\n      if (nextProps.points !== prevState.curPoints) {\n        return {\n          curPoints: nextProps.points\n        };\n      }\n      return null;\n    }\n  }, {\n    key: \"renderDotItem\",\n    value: function renderDotItem(option, props) {\n      var dotItem;\n      if ( /*#__PURE__*/React.isValidElement(option)) {\n        dotItem = /*#__PURE__*/React.cloneElement(option, props);\n      } else if (_isFunction(option)) {\n        dotItem = option(props);\n      } else {\n        dotItem = /*#__PURE__*/React.createElement(Dot, _extends({}, props, {\n          className: \"recharts-radar-dot\"\n        }));\n      }\n      return dotItem;\n    }\n  }]);\n  return Radar;\n}(PureComponent);\nRadar.displayName = 'Radar';\nRadar.defaultProps = {\n  angleAxisId: 0,\n  radiusAxisId: 0,\n  hide: false,\n  activeDot: true,\n  dot: false,\n  legendType: 'rect',\n  isAnimationActive: !Global.isSsr,\n  animationBegin: 0,\n  animationDuration: 1500,\n  animationEasing: 'ease'\n};\nRadar.getComposedData = function (_ref2) {\n  var radiusAxis = _ref2.radiusAxis,\n    angleAxis = _ref2.angleAxis,\n    displayedData = _ref2.displayedData,\n    dataKey = _ref2.dataKey,\n    bandSize = _ref2.bandSize;\n  var cx = angleAxis.cx,\n    cy = angleAxis.cy;\n  var isRange = false;\n  var points = [];\n  displayedData.forEach(function (entry, i) {\n    var name = getValueByDataKey(entry, angleAxis.dataKey, i);\n    var value = getValueByDataKey(entry, dataKey);\n    var angle = angleAxis.scale(name) + (bandSize || 0);\n    var pointValue = _isArray(value) ? _last(value) : value;\n    var radius = _isNil(pointValue) ? undefined : radiusAxis.scale(pointValue);\n    if (_isArray(value) && value.length >= 2) {\n      isRange = true;\n    }\n    points.push(_objectSpread(_objectSpread({}, polarToCartesian(cx, cy, radius, angle)), {}, {\n      name: name,\n      value: value,\n      cx: cx,\n      cy: cy,\n      radius: radius,\n      angle: angle,\n      payload: entry\n    }));\n  });\n  var baseLinePoints = [];\n  if (isRange) {\n    points.forEach(function (point) {\n      if (_isArray(point.value)) {\n        var baseValue = _first(point.value);\n        var radius = _isNil(baseValue) ? undefined : radiusAxis.scale(baseValue);\n        baseLinePoints.push(_objectSpread(_objectSpread({}, point), {}, {\n          radius: radius\n        }, polarToCartesian(cx, cy, radius, point.angle)));\n      } else {\n        baseLinePoints.push(point);\n      }\n    });\n  }\n  return {\n    points: points,\n    isRange: isRange,\n    baseLinePoints: baseLinePoints\n  };\n};","map":null,"metadata":{},"sourceType":"module"}