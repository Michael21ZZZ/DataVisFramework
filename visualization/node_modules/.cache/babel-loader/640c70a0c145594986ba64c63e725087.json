{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { ModernAutoControlledComponent as Component, childrenUtils, createHTMLIframe, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * An embed displays content from other websites like YouTube videos or Google Maps.\n */\n\nvar Embed = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Embed, _Component);\n  function Embed() {\n    var _this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.handleClick = function (e) {\n      var onClick = _this.props.onClick;\n      var active = _this.state.active;\n      if (onClick) onClick(e, _extends({}, _this.props, {\n        active: true\n      }));\n      if (!active) _this.setState({\n        active: true\n      });\n    };\n    return _this;\n  }\n  var _proto = Embed.prototype;\n  _proto.getSrc = function getSrc() {\n    var _this$props = this.props,\n      _this$props$autoplay = _this$props.autoplay,\n      autoplay = _this$props$autoplay === void 0 ? true : _this$props$autoplay,\n      _this$props$brandedUI = _this$props.brandedUI,\n      brandedUI = _this$props$brandedUI === void 0 ? false : _this$props$brandedUI,\n      _this$props$color = _this$props.color,\n      color = _this$props$color === void 0 ? '#444444' : _this$props$color,\n      _this$props$hd = _this$props.hd,\n      hd = _this$props$hd === void 0 ? true : _this$props$hd,\n      id = _this$props.id,\n      source = _this$props.source,\n      url = _this$props.url;\n    if (source === 'youtube') {\n      return [\"//www.youtube.com/embed/\" + id, '?autohide=true', \"&amp;autoplay=\" + autoplay, \"&amp;color=\" + encodeURIComponent(color), \"&amp;hq=\" + hd, '&amp;jsapi=false', \"&amp;modestbranding=\" + brandedUI, \"&amp;rel=\" + (brandedUI ? 0 : 1)].join('');\n    }\n    if (source === 'vimeo') {\n      return [\"//player.vimeo.com/video/\" + id, '?api=false', \"&amp;autoplay=\" + autoplay, '&amp;byline=false', \"&amp;color=\" + encodeURIComponent(color), '&amp;portrait=false', '&amp;title=false'].join('');\n    }\n    return url;\n  };\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n      aspectRatio = _this$props2.aspectRatio,\n      className = _this$props2.className,\n      icon = _this$props2.icon,\n      placeholder = _this$props2.placeholder;\n    var active = this.state.active;\n    var classes = cx('ui', aspectRatio, useKeyOnly(active, 'active'), 'embed', className);\n    var rest = getUnhandledProps(Embed, this.props);\n    var ElementType = getElementType(Embed, this.props);\n    var iconShorthand = icon !== undefined ? icon : 'video play';\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes,\n      onClick: this.handleClick\n    }), Icon.create(iconShorthand, {\n      autoGenerateKey: false\n    }), placeholder && /*#__PURE__*/React.createElement(\"img\", {\n      className: \"placeholder\",\n      src: placeholder\n    }), this.renderEmbed());\n  };\n  _proto.renderEmbed = function renderEmbed() {\n    var _this$props3 = this.props,\n      children = _this$props3.children,\n      content = _this$props3.content,\n      iframe = _this$props3.iframe,\n      source = _this$props3.source;\n    var active = this.state.active;\n    if (!active) return null;\n    if (!childrenUtils.isNil(children)) return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"embed\"\n    }, children);\n    if (!childrenUtils.isNil(content)) return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"embed\"\n    }, content);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"embed\"\n    }, createHTMLIframe(childrenUtils.isNil(iframe) ? this.getSrc() : iframe, {\n      defaultProps: {\n        allowFullScreen: false,\n        frameBorder: 0,\n        height: '100%',\n        scrolling: 'no',\n        src: this.getSrc(),\n        title: \"Embedded content from \" + source + \".\",\n        width: '100%'\n      },\n      autoGenerateKey: false\n    }));\n  };\n  return Embed;\n}(Component);\nEmbed.handledProps = [\"active\", \"as\", \"aspectRatio\", \"autoplay\", \"brandedUI\", \"children\", \"className\", \"color\", \"content\", \"defaultActive\", \"hd\", \"icon\", \"id\", \"iframe\", \"onClick\", \"placeholder\", \"source\", \"url\"];\nexport { Embed as default };\nEmbed.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n  /** An embed can be active. */\n  active: PropTypes.bool,\n  /** An embed can specify an alternative aspect ratio. */\n  aspectRatio: PropTypes.oneOf(['4:3', '16:9', '21:9']),\n  /** Setting to true or false will force autoplay. */\n  autoplay: customPropTypes.every([customPropTypes.demand(['source']), PropTypes.bool]),\n  /** Whether to show networks branded UI like title cards, or after video calls to action. */\n  brandedUI: customPropTypes.every([customPropTypes.demand(['source']), PropTypes.bool]),\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Specifies a default chrome color with Vimeo or YouTube. */\n  color: customPropTypes.every([customPropTypes.demand(['source']), PropTypes.string]),\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /** Initial value of active. */\n  defaultActive: PropTypes.bool,\n  /** Whether to prefer HD content. */\n  hd: customPropTypes.every([customPropTypes.demand(['source']), PropTypes.bool]),\n  /** Specifies an icon to use with placeholder content. */\n  icon: customPropTypes.itemShorthand,\n  /** Specifies an id for source. */\n  id: customPropTypes.every([customPropTypes.demand(['source']), PropTypes.string]),\n  /** Shorthand for HTML iframe. */\n  iframe: customPropTypes.every([customPropTypes.demand(['source']), customPropTypes.itemShorthand]),\n  /**\n   * Called on click.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props and proposed value.\n   */\n  onClick: PropTypes.func,\n  /** A placeholder image for embed. */\n  placeholder: PropTypes.string,\n  /** Specifies a source to use. */\n  source: customPropTypes.every([customPropTypes.disallow(['sourceUrl']), PropTypes.oneOf(['youtube', 'vimeo'])]),\n  /** Specifies a url to use for embed. */\n  url: customPropTypes.every([customPropTypes.disallow(['source']), PropTypes.string])\n} : {};\nEmbed.autoControlledProps = ['active'];","map":null,"metadata":{},"sourceType":"module"}