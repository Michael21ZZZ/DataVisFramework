{"ast":null,"code":"/*! decimal.js-light v2.5.1 https://github.com/MikeMcl/decimal.js-light/LICENCE */\n;\n(function (globalScope) {\n  'use strict';\n\n  /*\r\n   *  decimal.js-light v2.5.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js-light\r\n   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Expat Licence\r\n   */\n\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n\n  // The limit on the value of `precision`, and on the value of the first argument to\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\n  var MAX_DIGITS = 1e9,\n    // 0 to 1e9\n\n    // The initial configuration properties of the Decimal constructor.\n    Decimal = {\n      // These values must be integers within the stated ranges (inclusive).\n      // Most of these values can be changed during run-time using `Decimal.config`.\n\n      // The maximum number of significant digits of the result of a calculation or base conversion.\n      // E.g. `Decimal.config({ precision: 20 });`\n      precision: 20,\n      // 1 to MAX_DIGITS\n\n      // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\n      // `toFixed`, `toPrecision` and `toSignificantDigits`.\n      //\n      // ROUND_UP         0 Away from zero.\n      // ROUND_DOWN       1 Towards zero.\n      // ROUND_CEIL       2 Towards +Infinity.\n      // ROUND_FLOOR      3 Towards -Infinity.\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n      //\n      // E.g.\n      // `Decimal.rounding = 4;`\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n      rounding: 4,\n      // 0 to 8\n\n      // The exponent value at and beneath which `toString` returns exponential notation.\n      // JavaScript numbers: -7\n      toExpNeg: -7,\n      // 0 to -MAX_E\n\n      // The exponent value at and above which `toString` returns exponential notation.\n      // JavaScript numbers: 21\n      toExpPos: 21,\n      // 0 to MAX_E\n\n      // The natural logarithm of 10.\n      // 115 digits\n      LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\n    },\n    // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\n\n    external = true,\n    decimalError = '[DecimalError] ',\n    invalidArgument = decimalError + 'Invalid argument: ',\n    exponentOutOfRange = decimalError + 'Exponent out of range: ',\n    mathfloor = Math.floor,\n    mathpow = Math.pow,\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n    ONE,\n    BASE = 1e7,\n    LOG_BASE = 7,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),\n    // 1286742750677284\n\n    // Decimal.prototype object\n    P = {};\n\n  // Decimal prototype methods\n\n  /*\r\n   *  absoluteValue                       abs\r\n   *  comparedTo                          cmp\r\n   *  decimalPlaces                       dp\r\n   *  dividedBy                           div\r\n   *  dividedToIntegerBy                  idiv\r\n   *  equals                              eq\r\n   *  exponent\r\n   *  greaterThan                         gt\r\n   *  greaterThanOrEqualTo                gte\r\n   *  isInteger                           isint\r\n   *  isNegative                          isneg\r\n   *  isPositive                          ispos\r\n   *  isZero\r\n   *  lessThan                            lt\r\n   *  lessThanOrEqualTo                   lte\r\n   *  logarithm                           log\r\n   *  minus                               sub\r\n   *  modulo                              mod\r\n   *  naturalExponential                  exp\r\n   *  naturalLogarithm                    ln\r\n   *  negated                             neg\r\n   *  plus                                add\r\n   *  precision                           sd\r\n   *  squareRoot                          sqrt\r\n   *  times                               mul\r\n   *  toDecimalPlaces                     todp\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toInteger                           toint\r\n   *  toNumber\r\n   *  toPower                             pow\r\n   *  toPrecision\r\n   *  toSignificantDigits                 tosd\r\n   *  toString\r\n   *  valueOf                             val\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\n  P.absoluteValue = P.abs = function () {\n    var x = new this.constructor(this);\n    if (x.s) x.s = 1;\n    return x;\n  };\n\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value\r\n   *\r\n   */\n  P.comparedTo = P.cmp = function (y) {\n    var i,\n      j,\n      xdL,\n      ydL,\n      x = this;\n    y = new x.constructor(y);\n\n    // Signs differ?\n    if (x.s !== y.s) return x.s || -y.s;\n\n    // Compare exponents.\n    if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\n    xdL = x.d.length;\n    ydL = y.d.length;\n\n    // Compare digit by digit.\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\n      if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\n    }\n\n    // Compare lengths.\n    return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\n  };\n\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\n  P.decimalPlaces = P.dp = function () {\n    var x = this,\n      w = x.d.length - 1,\n      dp = (w - x.e) * LOG_BASE;\n\n    // Subtract the number of trailing zeros of the last word.\n    w = x.d[w];\n    if (w) for (; w % 10 == 0; w /= 10) {\n      dp--;\n    }\n    return dp < 0 ? 0 : dp;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\n  P.dividedBy = P.div = function (y) {\n    return divide(this, new this.constructor(y));\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, truncated to `precision` significant digits.\r\n   *\r\n   */\n  P.dividedToIntegerBy = P.idiv = function (y) {\n    var x = this,\n      Ctor = x.constructor;\n    return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\n  P.equals = P.eq = function (y) {\n    return !this.cmp(y);\n  };\n\n  /*\r\n   * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n   *\r\n   */\n  P.exponent = function () {\n    return getBase10Exponent(this);\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\n  P.greaterThan = P.gt = function (y) {\n    return this.cmp(y) > 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\n  P.greaterThanOrEqualTo = P.gte = function (y) {\n    return this.cmp(y) >= 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\n  P.isInteger = P.isint = function () {\n    return this.e > this.d.length - 2;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\n  P.isNegative = P.isneg = function () {\n    return this.s < 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\n  P.isPositive = P.ispos = function () {\n    return this.s > 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is 0, otherwise return false.\r\n   *\r\n   */\n  P.isZero = function () {\n    return this.s === 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\n  P.lessThan = P.lt = function (y) {\n    return this.cmp(y) < 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\n  P.lessThanOrEqualTo = P.lte = function (y) {\n    return this.cmp(y) < 1;\n  };\n\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   * If no base is specified, return log[10](x).\r\n   *\r\n   * log[base](x) = ln(x) / ln(base)\r\n   *\r\n   * The maximum error of the result is 1 ulp (unit in the last place).\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\n  P.logarithm = P.log = function (base) {\n    var r,\n      x = this,\n      Ctor = x.constructor,\n      pr = Ctor.precision,\n      wpr = pr + 5;\n\n    // Default base is 10.\n    if (base === void 0) {\n      base = new Ctor(10);\n    } else {\n      base = new Ctor(base);\n\n      // log[-b](x) = NaN\n      // log[0](x)  = NaN\n      // log[1](x)  = NaN\n      if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\n    }\n\n    // log[b](-x) = NaN\n    // log[b](0) = -Infinity\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\n\n    // log[b](1) = 0\n    if (x.eq(ONE)) return new Ctor(0);\n    external = false;\n    r = divide(ln(x, wpr), ln(base, wpr), wpr);\n    external = true;\n    return round(r, pr);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\n  P.minus = P.sub = function (y) {\n    var x = this;\n    y = new x.constructor(y);\n    return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\n  P.modulo = P.mod = function (y) {\n    var q,\n      x = this,\n      Ctor = x.constructor,\n      pr = Ctor.precision;\n    y = new Ctor(y);\n\n    // x % 0 = NaN\n    if (!y.s) throw Error(decimalError + 'NaN');\n\n    // Return x if x is 0.\n    if (!x.s) return round(new Ctor(x), pr);\n\n    // Prevent rounding of intermediate calculations.\n    external = false;\n    q = divide(x, y, 0, 1).times(y);\n    external = true;\n    return x.minus(q);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\n  P.naturalExponential = P.exp = function () {\n    return exp(this);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   */\n  P.naturalLogarithm = P.ln = function () {\n    return ln(this);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\n  P.negated = P.neg = function () {\n    var x = new this.constructor(this);\n    x.s = -x.s || 0;\n    return x;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\n  P.plus = P.add = function (y) {\n    var x = this;\n    y = new x.constructor(y);\n    return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\n  };\n\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\n  P.precision = P.sd = function (z) {\n    var e,\n      sd,\n      w,\n      x = this;\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n    e = getBase10Exponent(x) + 1;\n    w = x.d.length - 1;\n    sd = w * LOG_BASE + 1;\n    w = x.d[w];\n\n    // If non-zero...\n    if (w) {\n      // Subtract the number of trailing zeros of the last word.\n      for (; w % 10 == 0; w /= 10) {\n        sd--;\n      }\n\n      // Add the number of digits of the first word.\n      for (w = x.d[0]; w >= 10; w /= 10) {\n        sd++;\n      }\n    }\n    return z && e > sd ? e : sd;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\n  P.squareRoot = P.sqrt = function () {\n    var e,\n      n,\n      pr,\n      r,\n      s,\n      t,\n      wpr,\n      x = this,\n      Ctor = x.constructor;\n\n    // Negative or zero?\n    if (x.s < 1) {\n      if (!x.s) return new Ctor(0);\n\n      // sqrt(-x) = NaN\n      throw Error(decimalError + 'NaN');\n    }\n    e = getBase10Exponent(x);\n    external = false;\n\n    // Initial estimate.\n    s = Math.sqrt(+x);\n\n    // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n    if (s == 0 || s == 1 / 0) {\n      n = digitsToString(x.d);\n      if ((n.length + e) % 2 == 0) n += '0';\n      s = Math.sqrt(n);\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n      r = new Ctor(n);\n    } else {\n      r = new Ctor(s.toString());\n    }\n    pr = Ctor.precision;\n    s = wpr = pr + 3;\n\n    // Newton-Raphson iteration.\n    for (;;) {\n      t = r;\n      r = t.plus(divide(x, t, wpr + 2)).times(0.5);\n      if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\n        n = n.slice(wpr - 3, wpr + 1);\n\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\n        if (s == wpr && n == '4999') {\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          round(t, pr + 1, 0);\n          if (t.times(t).eq(x)) {\n            r = t;\n            break;\n          }\n        } else if (n != '9999') {\n          break;\n        }\n        wpr += 4;\n      }\n    }\n    external = true;\n    return round(r, pr);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\n  P.times = P.mul = function (y) {\n    var carry,\n      e,\n      i,\n      k,\n      r,\n      rL,\n      t,\n      xdL,\n      ydL,\n      x = this,\n      Ctor = x.constructor,\n      xd = x.d,\n      yd = (y = new Ctor(y)).d;\n\n    // Return 0 if either is 0.\n    if (!x.s || !y.s) return new Ctor(0);\n    y.s *= x.s;\n    e = x.e + y.e;\n    xdL = xd.length;\n    ydL = yd.length;\n\n    // Ensure xd points to the longer array.\n    if (xdL < ydL) {\n      r = xd;\n      xd = yd;\n      yd = r;\n      rL = xdL;\n      xdL = ydL;\n      ydL = rL;\n    }\n\n    // Initialise the result array with zeros.\n    r = [];\n    rL = xdL + ydL;\n    for (i = rL; i--;) {\n      r.push(0);\n    }\n\n    // Multiply!\n    for (i = ydL; --i >= 0;) {\n      carry = 0;\n      for (k = xdL + i; k > i;) {\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\n        r[k--] = t % BASE | 0;\n        carry = t / BASE | 0;\n      }\n      r[k] = (r[k] + carry) % BASE | 0;\n    }\n\n    // Remove trailing zeros.\n    for (; !r[--rL];) {\n      r.pop();\n    }\n    if (carry) ++e;else r.shift();\n    y.d = r;\n    y.e = e;\n    return external ? round(y, Ctor.precision) : y;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toDecimalPlaces = P.todp = function (dp, rm) {\n    var x = this,\n      Ctor = x.constructor;\n    x = new Ctor(x);\n    if (dp === void 0) return x;\n    checkInt32(dp, 0, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    return round(x, dp + getBase10Exponent(x) + 1, rm);\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toExponential = function (dp, rm) {\n    var str,\n      x = this,\n      Ctor = x.constructor;\n    if (dp === void 0) {\n      str = toString(x, true);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      x = round(new Ctor(x), dp + 1, rm);\n      str = toString(x, true, dp + 1);\n    }\n    return str;\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\n  P.toFixed = function (dp, rm) {\n    var str,\n      y,\n      x = this,\n      Ctor = x.constructor;\n    if (dp === void 0) return toString(x);\n    checkInt32(dp, 0, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\n    str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\n\n    // To determine whether to add the minus sign look at the value before it was rounded,\n    // i.e. look at `x` rather than `y`.\n    return x.isneg() && !x.isZero() ? '-' + str : str;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\n  P.toInteger = P.toint = function () {\n    var x = this,\n      Ctor = x.constructor;\n    return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\n  };\n\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   *\r\n   */\n  P.toNumber = function () {\n    return +this;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * The maximum error is 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\n  P.toPower = P.pow = function (y) {\n    var e,\n      k,\n      pr,\n      r,\n      sign,\n      yIsInt,\n      x = this,\n      Ctor = x.constructor,\n      guard = 12,\n      yn = +(y = new Ctor(y));\n\n    // pow(x, 0) = 1\n    if (!y.s) return new Ctor(ONE);\n    x = new Ctor(x);\n\n    // pow(0, y > 0) = 0\n    // pow(0, y < 0) = Infinity\n    if (!x.s) {\n      if (y.s < 1) throw Error(decimalError + 'Infinity');\n      return x;\n    }\n\n    // pow(1, y) = 1\n    if (x.eq(ONE)) return x;\n    pr = Ctor.precision;\n\n    // pow(x, 1) = x\n    if (y.eq(ONE)) return round(x, pr);\n    e = y.e;\n    k = y.d.length - 1;\n    yIsInt = e >= k;\n    sign = x.s;\n    if (!yIsInt) {\n      // pow(x < 0, y non-integer) = NaN\n      if (sign < 0) throw Error(decimalError + 'NaN');\n\n      // If y is a small integer use the 'exponentiation by squaring' algorithm.\n    } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n      r = new Ctor(ONE);\n\n      // Max k of 9007199254740991 takes 53 loop iterations.\n      // Maximum digits array length; leaves [28, 34] guard digits.\n      e = Math.ceil(pr / LOG_BASE + 4);\n      external = false;\n      for (;;) {\n        if (k % 2) {\n          r = r.times(x);\n          truncate(r.d, e);\n        }\n        k = mathfloor(k / 2);\n        if (k === 0) break;\n        x = x.times(x);\n        truncate(x.d, e);\n      }\n      external = true;\n      return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\n    }\n\n    // Result is negative if x is negative and the last digit of integer y is odd.\n    sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\n    x.s = 1;\n    external = false;\n    r = y.times(ln(x, pr + guard));\n    external = true;\n    r = exp(r);\n    r.s = sign;\n    return r;\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toPrecision = function (sd, rm) {\n    var e,\n      str,\n      x = this,\n      Ctor = x.constructor;\n    if (sd === void 0) {\n      e = getBase10Exponent(x);\n      str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      x = round(new Ctor(x), sd, rm);\n      e = getBase10Exponent(x);\n      str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\n    }\n    return str;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toSignificantDigits = P.tosd = function (sd, rm) {\n    var x = this,\n      Ctor = x.constructor;\n    if (sd === void 0) {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    }\n    return round(new Ctor(x), sd, rm);\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\n  P.toString = P.valueOf = P.val = P.toJSON = function () {\n    var x = this,\n      e = getBase10Exponent(x),\n      Ctor = x.constructor;\n    return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\n  };\n\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n\n  /*\r\n   *  add                 P.minus, P.plus\r\n   *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n   *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n   *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n   *  exp                 P.exp, P.pow\r\n   *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n   *                      P.toString, divide, round, toString, exp, ln\r\n   *  getLn10             P.log, ln\r\n   *  getZeroString       digitsToString, toString\r\n   *  ln                  P.log, P.ln, P.pow, exp\r\n   *  parseDecimal        Decimal\r\n   *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n   *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n   *                      divide, getLn10, exp, ln\r\n   *  subtract            P.minus, P.plus\r\n   *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n   *  truncate            P.pow\r\n   *\r\n   *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n   *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n   */\n\n  function add(x, y) {\n    var carry,\n      d,\n      e,\n      i,\n      k,\n      len,\n      xd,\n      yd,\n      Ctor = x.constructor,\n      pr = Ctor.precision;\n\n    // If either is zero...\n    if (!x.s || !y.s) {\n      // Return x if y is zero.\n      // Return y if y is non-zero.\n      if (!y.s) y = new Ctor(x);\n      return external ? round(y, pr) : y;\n    }\n    xd = x.d;\n    yd = y.d;\n\n    // x and y are finite, non-zero numbers with the same sign.\n\n    k = x.e;\n    e = y.e;\n    xd = xd.slice();\n    i = k - e;\n\n    // If base 1e7 exponents differ...\n    if (i) {\n      if (i < 0) {\n        d = xd;\n        i = -i;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = k;\n        len = xd.length;\n      }\n\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n      k = Math.ceil(pr / LOG_BASE);\n      len = k > len ? k + 1 : len + 1;\n      if (i > len) {\n        i = len;\n        d.length = 1;\n      }\n\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n      d.reverse();\n      for (; i--;) {\n        d.push(0);\n      }\n      d.reverse();\n    }\n    len = xd.length;\n    i = yd.length;\n\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n    if (len - i < 0) {\n      i = len;\n      d = yd;\n      yd = xd;\n      xd = d;\n    }\n\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n    for (carry = 0; i;) {\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n      xd[i] %= BASE;\n    }\n    if (carry) {\n      xd.unshift(carry);\n      ++e;\n    }\n\n    // Remove trailing zeros.\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    for (len = xd.length; xd[--len] == 0;) {\n      xd.pop();\n    }\n    y.d = xd;\n    y.e = e;\n    return external ? round(y, pr) : y;\n  }\n  function checkInt32(i, min, max) {\n    if (i !== ~~i || i < min || i > max) {\n      throw Error(invalidArgument + i);\n    }\n  }\n  function digitsToString(d) {\n    var i,\n      k,\n      ws,\n      indexOfLastWord = d.length - 1,\n      str = '',\n      w = d[0];\n    if (indexOfLastWord > 0) {\n      str += w;\n      for (i = 1; i < indexOfLastWord; i++) {\n        ws = d[i] + '';\n        k = LOG_BASE - ws.length;\n        if (k) str += getZeroString(k);\n        str += ws;\n      }\n      w = d[i];\n      ws = w + '';\n      k = LOG_BASE - ws.length;\n      if (k) str += getZeroString(k);\n    } else if (w === 0) {\n      return '0';\n    }\n\n    // Remove trailing zeros of last w.\n    for (; w % 10 === 0;) {\n      w /= 10;\n    }\n    return str + w;\n  }\n  var divide = function () {\n    // Assumes non-zero x and k, and hence non-zero result.\n    function multiplyInteger(x, k) {\n      var temp,\n        carry = 0,\n        i = x.length;\n      for (x = x.slice(); i--;) {\n        temp = x[i] * k + carry;\n        x[i] = temp % BASE | 0;\n        carry = temp / BASE | 0;\n      }\n      if (carry) x.unshift(carry);\n      return x;\n    }\n    function compare(a, b, aL, bL) {\n      var i, r;\n      if (aL != bL) {\n        r = aL > bL ? 1 : -1;\n      } else {\n        for (i = r = 0; i < aL; i++) {\n          if (a[i] != b[i]) {\n            r = a[i] > b[i] ? 1 : -1;\n            break;\n          }\n        }\n      }\n      return r;\n    }\n    function subtract(a, b, aL) {\n      var i = 0;\n\n      // Subtract b from a.\n      for (; aL--;) {\n        a[aL] -= i;\n        i = a[aL] < b[aL] ? 1 : 0;\n        a[aL] = i * BASE + a[aL] - b[aL];\n      }\n\n      // Remove leading zeros.\n      for (; !a[0] && a.length > 1;) {\n        a.shift();\n      }\n    }\n    return function (x, y, pr, dp) {\n      var cmp,\n        e,\n        i,\n        k,\n        prod,\n        prodL,\n        q,\n        qd,\n        rem,\n        remL,\n        rem0,\n        sd,\n        t,\n        xi,\n        xL,\n        yd0,\n        yL,\n        yz,\n        Ctor = x.constructor,\n        sign = x.s == y.s ? 1 : -1,\n        xd = x.d,\n        yd = y.d;\n\n      // Either 0?\n      if (!x.s) return new Ctor(x);\n      if (!y.s) throw Error(decimalError + 'Division by zero');\n      e = x.e - y.e;\n      yL = yd.length;\n      xL = xd.length;\n      q = new Ctor(sign);\n      qd = q.d = [];\n\n      // Result exponent may be one less than e.\n      for (i = 0; yd[i] == (xd[i] || 0);) {\n        ++i;\n      }\n      if (yd[i] > (xd[i] || 0)) --e;\n      if (pr == null) {\n        sd = pr = Ctor.precision;\n      } else if (dp) {\n        sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\n      } else {\n        sd = pr;\n      }\n      if (sd < 0) return new Ctor(0);\n\n      // Convert precision in number of base 10 digits to base 1e7 digits.\n      sd = sd / LOG_BASE + 2 | 0;\n      i = 0;\n\n      // divisor < 1e7\n      if (yL == 1) {\n        k = 0;\n        yd = yd[0];\n        sd++;\n\n        // k is the carry.\n        for (; (i < xL || k) && sd--; i++) {\n          t = k * BASE + (xd[i] || 0);\n          qd[i] = t / yd | 0;\n          k = t % yd | 0;\n        }\n\n        // divisor >= 1e7\n      } else {\n        // Normalise xd and yd so highest order digit of yd is >= BASE/2\n        k = BASE / (yd[0] + 1) | 0;\n        if (k > 1) {\n          yd = multiplyInteger(yd, k);\n          xd = multiplyInteger(xd, k);\n          yL = yd.length;\n          xL = xd.length;\n        }\n        xi = yL;\n        rem = xd.slice(0, yL);\n        remL = rem.length;\n\n        // Add zeros to make remainder as long as divisor.\n        for (; remL < yL;) {\n          rem[remL++] = 0;\n        }\n        yz = yd.slice();\n        yz.unshift(0);\n        yd0 = yd[0];\n        if (yd[1] >= BASE / 2) ++yd0;\n        do {\n          k = 0;\n\n          // Compare divisor and remainder.\n          cmp = compare(yd, rem, yL, remL);\n\n          // If divisor < remainder.\n          if (cmp < 0) {\n            // Calculate trial digit, k.\n            rem0 = rem[0];\n            if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\n\n            // k will be how many times the divisor goes into the current remainder.\n            k = rem0 / yd0 | 0;\n\n            //  Algorithm:\n            //  1. product = divisor * trial digit (k)\n            //  2. if product > remainder: product -= divisor, k--\n            //  3. remainder -= product\n            //  4. if product was < remainder at 2:\n            //    5. compare new remainder and divisor\n            //    6. If remainder > divisor: remainder -= divisor, k++\n\n            if (k > 1) {\n              if (k >= BASE) k = BASE - 1;\n\n              // product = divisor * trial digit.\n              prod = multiplyInteger(yd, k);\n              prodL = prod.length;\n              remL = rem.length;\n\n              // Compare product and remainder.\n              cmp = compare(prod, rem, prodL, remL);\n\n              // product > remainder.\n              if (cmp == 1) {\n                k--;\n\n                // Subtract divisor from product.\n                subtract(prod, yL < prodL ? yz : yd, prodL);\n              }\n            } else {\n              // cmp is -1.\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n              if (k == 0) cmp = k = 1;\n              prod = yd.slice();\n            }\n            prodL = prod.length;\n            if (prodL < remL) prod.unshift(0);\n\n            // Subtract product from remainder.\n            subtract(rem, prod, remL);\n\n            // If product was < previous remainder.\n            if (cmp == -1) {\n              remL = rem.length;\n\n              // Compare divisor and new remainder.\n              cmp = compare(yd, rem, yL, remL);\n\n              // If divisor < new remainder, subtract divisor from remainder.\n              if (cmp < 1) {\n                k++;\n\n                // Subtract divisor from remainder.\n                subtract(rem, yL < remL ? yz : yd, remL);\n              }\n            }\n            remL = rem.length;\n          } else if (cmp === 0) {\n            k++;\n            rem = [0];\n          } // if cmp === 1, k will be 0\n\n          // Add the next digit, k, to the result array.\n          qd[i++] = k;\n\n          // Update the remainder.\n          if (cmp && rem[0]) {\n            rem[remL++] = xd[xi] || 0;\n          } else {\n            rem = [xd[xi]];\n            remL = 1;\n          }\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\n      }\n\n      // Leading zero?\n      if (!qd[0]) qd.shift();\n      q.e = e;\n      return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\n    };\n  }();\n\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n   * significant digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   */\n  function exp(x, sd) {\n    var denominator,\n      guard,\n      pow,\n      sum,\n      t,\n      wpr,\n      i = 0,\n      k = 0,\n      Ctor = x.constructor,\n      pr = Ctor.precision;\n    if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\n\n    // exp(0) = 1\n    if (!x.s) return new Ctor(ONE);\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n    t = new Ctor(0.03125);\n    while (x.abs().gte(0.1)) {\n      x = x.times(t); // x = x / 2^5\n      k += 5;\n    }\n\n    // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n    wpr += guard;\n    denominator = pow = sum = new Ctor(ONE);\n    Ctor.precision = wpr;\n    for (;;) {\n      pow = round(pow.times(x), wpr);\n      denominator = denominator.times(++i);\n      t = sum.plus(divide(pow, denominator, wpr));\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        while (k--) {\n          sum = round(sum.times(sum), wpr);\n        }\n        Ctor.precision = pr;\n        return sd == null ? (external = true, round(sum, pr)) : sum;\n      }\n      sum = t;\n    }\n  }\n\n  // Calculate the base 10 exponent from the base 1e7 exponent.\n  function getBase10Exponent(x) {\n    var e = x.e * LOG_BASE,\n      w = x.d[0];\n\n    // Add the number of digits of the first word of the digits array.\n    for (; w >= 10; w /= 10) {\n      e++;\n    }\n    return e;\n  }\n  function getLn10(Ctor, sd, pr) {\n    if (sd > Ctor.LN10.sd()) {\n      // Reset global state in case the exception is caught.\n      external = true;\n      if (pr) Ctor.precision = pr;\n      throw Error(decimalError + 'LN10 precision limit exceeded');\n    }\n    return round(new Ctor(Ctor.LN10), sd);\n  }\n  function getZeroString(k) {\n    var zs = '';\n    for (; k--;) {\n      zs += '0';\n    }\n    return zs;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(n) is non-terminating (n != 1)\r\n   *\r\n   */\n  function ln(y, sd) {\n    var c,\n      c0,\n      denominator,\n      e,\n      numerator,\n      sum,\n      t,\n      wpr,\n      x2,\n      n = 1,\n      guard = 10,\n      x = y,\n      xd = x.d,\n      Ctor = x.constructor,\n      pr = Ctor.precision;\n\n    // ln(-x) = NaN\n    // ln(0) = -Infinity\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\n\n    // ln(1) = 0\n    if (x.eq(ONE)) return new Ctor(0);\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n    if (x.eq(10)) {\n      if (sd == null) external = true;\n      return getLn10(Ctor, wpr);\n    }\n    wpr += guard;\n    Ctor.precision = wpr;\n    c = digitsToString(xd);\n    c0 = c.charAt(0);\n    e = getBase10Exponent(x);\n    if (Math.abs(e) < 1.5e15) {\n      // Argument reduction.\n      // The series converges faster the closer the argument is to 1, so using\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n      // later be divided by this number, then separate out the power of 10 using\n      // ln(a*10^b) = ln(a) + b*ln(10).\n\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n      // max n is 6 (gives 0.7 - 1.3)\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\n        x = x.times(y);\n        c = digitsToString(x.d);\n        c0 = c.charAt(0);\n        n++;\n      }\n      e = getBase10Exponent(x);\n      if (c0 > 1) {\n        x = new Ctor('0.' + c);\n        e++;\n      } else {\n        x = new Ctor(c0 + '.' + c.slice(1));\n      }\n    } else {\n      // The argument reduction method above may result in overflow if the argument y is a massive\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\n      x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\n      Ctor.precision = pr;\n      return sd == null ? (external = true, round(x, pr)) : x;\n    }\n\n    // x is reduced to a value near 1.\n\n    // Taylor series.\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\n    sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\n    x2 = round(x.times(x), wpr);\n    denominator = 3;\n    for (;;) {\n      numerator = round(numerator.times(x2), wpr);\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        sum = sum.times(2);\n\n        // Reverse the argument reduction.\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\n        sum = divide(sum, new Ctor(n), wpr);\n        Ctor.precision = pr;\n        return sd == null ? (external = true, round(sum, pr)) : sum;\n      }\n      sum = t;\n      denominator += 2;\n    }\n  }\n\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\n  function parseDecimal(x, str) {\n    var e, i, len;\n\n    // Decimal point?\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n    // Exponential form?\n    if ((i = str.search(/e/i)) > 0) {\n      // Determine exponent.\n      if (e < 0) e = i;\n      e += +str.slice(i + 1);\n      str = str.substring(0, i);\n    } else if (e < 0) {\n      // Integer.\n      e = str.length;\n    }\n\n    // Determine leading zeros.\n    for (i = 0; str.charCodeAt(i) === 48;) {\n      ++i;\n    }\n\n    // Determine trailing zeros.\n    for (len = str.length; str.charCodeAt(len - 1) === 48;) {\n      --len;\n    }\n    str = str.slice(i, len);\n    if (str) {\n      len -= i;\n      e = e - i - 1;\n      x.e = mathfloor(e / LOG_BASE);\n      x.d = [];\n\n      // Transform base\n\n      // e is the base 10 exponent.\n      // i is where to slice str to get the first word of the digits array.\n      i = (e + 1) % LOG_BASE;\n      if (e < 0) i += LOG_BASE;\n      if (i < len) {\n        if (i) x.d.push(+str.slice(0, i));\n        for (len -= LOG_BASE; i < len;) {\n          x.d.push(+str.slice(i, i += LOG_BASE));\n        }\n        str = str.slice(i);\n        i = LOG_BASE - str.length;\n      } else {\n        i -= len;\n      }\n      for (; i--;) {\n        str += '0';\n      }\n      x.d.push(+str);\n      if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\n    } else {\n      // Zero.\n      x.s = 0;\n      x.e = 0;\n      x.d = [0];\n    }\n    return x;\n  }\n\n  /*\r\n   * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n   */\n  function round(x, sd, rm) {\n    var i,\n      j,\n      k,\n      n,\n      rd,\n      doRound,\n      w,\n      xdi,\n      xd = x.d;\n\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n    // w: the word of xd which contains the rounding digit, a base 1e7 number.\n    // xdi: the index of w within xd.\n    // n: the number of digits of w.\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n    // they had leading zeros)\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n\n    // Get the length of the first word of the digits array xd.\n    for (n = 1, k = xd[0]; k >= 10; k /= 10) {\n      n++;\n    }\n    i = sd - n;\n\n    // Is the rounding digit in the first word of xd?\n    if (i < 0) {\n      i += LOG_BASE;\n      j = sd;\n      w = xd[xdi = 0];\n    } else {\n      xdi = Math.ceil((i + 1) / LOG_BASE);\n      k = xd.length;\n      if (xdi >= k) return x;\n      w = k = xd[xdi];\n\n      // Get the number of digits of w.\n      for (n = 1; k >= 10; k /= 10) {\n        n++;\n      }\n\n      // Get the index of rd within w.\n      i %= LOG_BASE;\n\n      // Get the index of rd within w, adjusted for leading zeros.\n      // The number of leading zeros of w is given by LOG_BASE - n.\n      j = i - LOG_BASE + n;\n    }\n    if (rm !== void 0) {\n      k = mathpow(10, n - j - 1);\n\n      // Get the rounding digit at index j of w.\n      rd = w / k % 10 | 0;\n\n      // Are there any non-zero digits after the rounding digit?\n      doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\n\n      // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\n      // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\n      // 714.\n\n      doRound = rm < 4 ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\n      // Check whether the digit to the left of the rounding digit is odd.\n      (i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n    }\n    if (sd < 1 || !xd[0]) {\n      if (doRound) {\n        k = getBase10Exponent(x);\n        xd.length = 1;\n\n        // Convert sd to decimal places.\n        sd = sd - k - 1;\n\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n        x.e = mathfloor(-sd / LOG_BASE) || 0;\n      } else {\n        xd.length = 1;\n\n        // Zero.\n        xd[0] = x.e = x.s = 0;\n      }\n      return x;\n    }\n\n    // Remove excess digits.\n    if (i == 0) {\n      xd.length = xdi;\n      k = 1;\n      xdi--;\n    } else {\n      xd.length = xdi + 1;\n      k = mathpow(10, LOG_BASE - i);\n\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n      // j > 0 means i > number of leading zeros of w.\n      xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\n    }\n    if (doRound) {\n      for (;;) {\n        // Is the digit to be rounded up in the first word of xd?\n        if (xdi == 0) {\n          if ((xd[0] += k) == BASE) {\n            xd[0] = 1;\n            ++x.e;\n          }\n          break;\n        } else {\n          xd[xdi] += k;\n          if (xd[xdi] != BASE) break;\n          xd[xdi--] = 0;\n          k = 1;\n        }\n      }\n    }\n\n    // Remove trailing zeros.\n    for (i = xd.length; xd[--i] === 0;) {\n      xd.pop();\n    }\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) {\n      throw Error(exponentOutOfRange + getBase10Exponent(x));\n    }\n    return x;\n  }\n  function subtract(x, y) {\n    var d,\n      e,\n      i,\n      j,\n      k,\n      len,\n      xd,\n      xe,\n      xLTy,\n      yd,\n      Ctor = x.constructor,\n      pr = Ctor.precision;\n\n    // Return y negated if x is zero.\n    // Return x if y is zero and x is non-zero.\n    if (!x.s || !y.s) {\n      if (y.s) y.s = -y.s;else y = new Ctor(x);\n      return external ? round(y, pr) : y;\n    }\n    xd = x.d;\n    yd = y.d;\n\n    // x and y are non-zero numbers with the same sign.\n\n    e = y.e;\n    xe = x.e;\n    xd = xd.slice();\n    k = xe - e;\n\n    // If exponents differ...\n    if (k) {\n      xLTy = k < 0;\n      if (xLTy) {\n        d = xd;\n        k = -k;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = xe;\n        len = xd.length;\n      }\n\n      // Numbers with massively different exponents would result in a very high number of zeros\n      // needing to be prepended, but this can be avoided while still ensuring correct rounding by\n      // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n      if (k > i) {\n        k = i;\n        d.length = 1;\n      }\n\n      // Prepend zeros to equalise exponents.\n      d.reverse();\n      for (i = k; i--;) {\n        d.push(0);\n      }\n      d.reverse();\n\n      // Base 1e7 exponents equal.\n    } else {\n      // Check digits to determine which is the bigger number.\n\n      i = xd.length;\n      len = yd.length;\n      xLTy = i < len;\n      if (xLTy) len = i;\n      for (i = 0; i < len; i++) {\n        if (xd[i] != yd[i]) {\n          xLTy = xd[i] < yd[i];\n          break;\n        }\n      }\n      k = 0;\n    }\n    if (xLTy) {\n      d = xd;\n      xd = yd;\n      yd = d;\n      y.s = -y.s;\n    }\n    len = xd.length;\n\n    // Append zeros to xd if shorter.\n    // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\n    for (i = yd.length - len; i > 0; --i) {\n      xd[len++] = 0;\n    }\n\n    // Subtract yd from xd.\n    for (i = yd.length; i > k;) {\n      if (xd[--i] < yd[i]) {\n        for (j = i; j && xd[--j] === 0;) {\n          xd[j] = BASE - 1;\n        }\n        --xd[j];\n        xd[i] += BASE;\n      }\n      xd[i] -= yd[i];\n    }\n\n    // Remove trailing zeros.\n    for (; xd[--len] === 0;) {\n      xd.pop();\n    }\n\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xd[0] === 0; xd.shift()) {\n      --e;\n    }\n\n    // Zero?\n    if (!xd[0]) return new Ctor(0);\n    y.d = xd;\n    y.e = e;\n\n    //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\n    return external ? round(y, pr) : y;\n  }\n  function toString(x, isExp, sd) {\n    var k,\n      e = getBase10Exponent(x),\n      str = digitsToString(x.d),\n      len = str.length;\n    if (isExp) {\n      if (sd && (k = sd - len) > 0) {\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\n      } else if (len > 1) {\n        str = str.charAt(0) + '.' + str.slice(1);\n      }\n      str = str + (e < 0 ? 'e' : 'e+') + e;\n    } else if (e < 0) {\n      str = '0.' + getZeroString(-e - 1) + str;\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\n    } else if (e >= len) {\n      str += getZeroString(e + 1 - len);\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\n    } else {\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\n      if (sd && (k = sd - len) > 0) {\n        if (e + 1 === len) str += '.';\n        str += getZeroString(k);\n      }\n    }\n    return x.s < 0 ? '-' + str : str;\n  }\n\n  // Does not strip trailing zeros.\n  function truncate(arr, len) {\n    if (arr.length > len) {\n      arr.length = len;\n      return true;\n    }\n  }\n\n  // Decimal methods\n\n  /*\r\n   *  clone\r\n   *  config/set\r\n   */\n\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\n  function clone(obj) {\n    var i, p, ps;\n\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * value {number|string|Decimal} A numeric value.\r\n     *\r\n     */\n    function Decimal(value) {\n      var x = this;\n\n      // Decimal called without new.\n      if (!(x instanceof Decimal)) return new Decimal(value);\n\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n      // which points to Object.\n      x.constructor = Decimal;\n\n      // Duplicate.\n      if (value instanceof Decimal) {\n        x.s = value.s;\n        x.e = value.e;\n        x.d = (value = value.d) ? value.slice() : value;\n        return;\n      }\n      if (typeof value === 'number') {\n        // Reject Infinity/NaN.\n        if (value * 0 !== 0) {\n          throw Error(invalidArgument + value);\n        }\n        if (value > 0) {\n          x.s = 1;\n        } else if (value < 0) {\n          value = -value;\n          x.s = -1;\n        } else {\n          x.s = 0;\n          x.e = 0;\n          x.d = [0];\n          return;\n        }\n\n        // Fast path for small integers.\n        if (value === ~~value && value < 1e7) {\n          x.e = 0;\n          x.d = [value];\n          return;\n        }\n        return parseDecimal(x, value.toString());\n      } else if (typeof value !== 'string') {\n        throw Error(invalidArgument + value);\n      }\n\n      // Minus sign?\n      if (value.charCodeAt(0) === 45) {\n        value = value.slice(1);\n        x.s = -1;\n      } else {\n        x.s = 1;\n      }\n      if (isDecimal.test(value)) parseDecimal(x, value);else throw Error(invalidArgument + value);\n    }\n    Decimal.prototype = P;\n    Decimal.ROUND_UP = 0;\n    Decimal.ROUND_DOWN = 1;\n    Decimal.ROUND_CEIL = 2;\n    Decimal.ROUND_FLOOR = 3;\n    Decimal.ROUND_HALF_UP = 4;\n    Decimal.ROUND_HALF_DOWN = 5;\n    Decimal.ROUND_HALF_EVEN = 6;\n    Decimal.ROUND_HALF_CEIL = 7;\n    Decimal.ROUND_HALF_FLOOR = 8;\n    Decimal.clone = clone;\n    Decimal.config = Decimal.set = config;\n    if (obj === void 0) obj = {};\n    if (obj) {\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\n      for (i = 0; i < ps.length;) {\n        if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n      }\n    }\n    Decimal.config(obj);\n    return Decimal;\n  }\n\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\n  function config(obj) {\n    if (!obj || typeof obj !== 'object') {\n      throw Error(decimalError + 'Object expected');\n    }\n    var i,\n      p,\n      v,\n      ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -1 / 0, 0, 'toExpPos', 0, 1 / 0];\n    for (i = 0; i < ps.length; i += 3) {\n      if ((v = obj[p = ps[i]]) !== void 0) {\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;else throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n    if ((v = obj[p = 'LN10']) !== void 0) {\n      if (v == Math.LN10) this[p] = new this(v);else throw Error(invalidArgument + p + ': ' + v);\n    }\n    return this;\n  }\n\n  // Create and configure initial Decimal constructor.\n  Decimal = clone(Decimal);\n  Decimal['default'] = Decimal.Decimal = Decimal;\n\n  // Internal constant.\n  ONE = new Decimal(1);\n\n  // Export.\n\n  // AMD.\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return Decimal;\n    });\n\n    // Node and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Decimal;\n\n    // Browser.\n  } else {\n    if (!globalScope) {\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : Function('return this')();\n    }\n    globalScope.Decimal = Decimal;\n  }\n})(this);","map":null,"metadata":{},"sourceType":"script"}