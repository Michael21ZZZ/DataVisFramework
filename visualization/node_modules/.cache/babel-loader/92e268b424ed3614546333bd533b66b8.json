{"ast":null,"code":"import * as React from 'react';\nimport { cloneElement, isValidElement, createRef, PureComponent, Component, forwardRef, useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport { findDOMNode } from 'react-dom'; /******************************************************************************\r\n                                         Copyright (c) Microsoft Corporation.\r\n                                         Permission to use, copy, modify, and/or distribute this software for any\r\n                                         purpose with or without fee is hereby granted.\r\n                                         THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n                                         REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n                                         AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n                                         INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n                                         LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n                                         OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n                                         PERFORMANCE OF THIS SOFTWARE.\r\n                                         ***************************************************************************** */\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    }\n  };\n  return _extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  _extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return _assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {}; /**\n                                                                                                                                                                                                 * Checks if `value` is the\n                                                                                                                                                                                                 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n                                                                                                                                                                                                 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n                                                                                                                                                                                                 *\n                                                                                                                                                                                                 * @static\n                                                                                                                                                                                                 * @memberOf _\n                                                                                                                                                                                                 * @since 0.1.0\n                                                                                                                                                                                                 * @category Lang\n                                                                                                                                                                                                 * @param {*} value The value to check.\n                                                                                                                                                                                                 * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n                                                                                                                                                                                                 * @example\n                                                                                                                                                                                                 *\n                                                                                                                                                                                                 * _.isObject({});\n                                                                                                                                                                                                 * // => true\n                                                                                                                                                                                                 *\n                                                                                                                                                                                                 * _.isObject([1, 2, 3]);\n                                                                                                                                                                                                 * // => true\n                                                                                                                                                                                                 *\n                                                                                                                                                                                                 * _.isObject(_.noop);\n                                                                                                                                                                                                 * // => true\n                                                                                                                                                                                                 *\n                                                                                                                                                                                                 * _.isObject(null);\n                                                                                                                                                                                                 * // => false\n                                                                                                                                                                                                 */\n\nfunction isObject$3(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\nvar isObject_1 = isObject$3; /** Detect free variable `global` from Node.js. */\n\nvar freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\nvar _freeGlobal = freeGlobal$1;\nvar freeGlobal = _freeGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$2 = freeGlobal || freeSelf || Function('return this')();\nvar _root = root$2;\nvar root$1 = _root;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now$1 = function now$1() {\n  return root$1.Date.now();\n};\nvar now_1 = now$1; /** Used to match a single whitespace character. */\n\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex$1(string) {\n  var index = string.length;\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\nvar _trimmedEndIndex = trimmedEndIndex$1;\nvar trimmedEndIndex = _trimmedEndIndex;\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim$1(string) {\n  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;\n}\nvar _baseTrim = baseTrim$1;\nvar root = _root;\n\n/** Built-in value references. */\nvar Symbol$2 = root.Symbol;\nvar _Symbol = Symbol$2;\nvar Symbol$1 = _Symbol;\n\n/** Used for built-in method references. */\nvar objectProto$1 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto$1.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString$1 = objectProto$1.toString;\n\n/** Built-in value references. */\nvar symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag$1(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n    tag = value[symToStringTag$1];\n  try {\n    value[symToStringTag$1] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n  var result = nativeObjectToString$1.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag$1] = tag;\n    } else {\n      delete value[symToStringTag$1];\n    }\n  }\n  return result;\n}\nvar _getRawTag = getRawTag$1; /** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString$1(value) {\n  return nativeObjectToString.call(value);\n}\nvar _objectToString = objectToString$1;\nvar Symbol = _Symbol,\n  getRawTag = _getRawTag,\n  objectToString = _objectToString;\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n  undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag$1(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\nvar _baseGetTag = baseGetTag$1; /**\n                                * Checks if `value` is object-like. A value is object-like if it's not `null`\n                                * and has a `typeof` result of \"object\".\n                                *\n                                * @static\n                                * @memberOf _\n                                * @since 4.0.0\n                                * @category Lang\n                                * @param {*} value The value to check.\n                                * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n                                * @example\n                                *\n                                * _.isObjectLike({});\n                                * // => true\n                                *\n                                * _.isObjectLike([1, 2, 3]);\n                                * // => true\n                                *\n                                * _.isObjectLike(_.noop);\n                                * // => false\n                                *\n                                * _.isObjectLike(null);\n                                * // => false\n                                */\n\nfunction isObjectLike$1(value) {\n  return value != null && typeof value == 'object';\n}\nvar isObjectLike_1 = isObjectLike$1;\nvar baseGetTag = _baseGetTag,\n  isObjectLike = isObjectLike_1;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$1(value) {\n  return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n}\nvar isSymbol_1 = isSymbol$1;\nvar baseTrim = _baseTrim,\n  isObject$2 = isObject_1,\n  isSymbol = isSymbol_1;\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber$1(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject$2(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject$2(other) ? other + '' : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n}\nvar toNumber_1 = toNumber$1;\nvar isObject$1 = isObject_1,\n  now = now_1,\n  toNumber = toNumber_1;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT$1 = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n  nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce$1(func, wait, options) {\n  var lastArgs,\n    lastThis,\n    maxWait,\n    result,\n    timerId,\n    lastCallTime,\n    lastInvokeTime = 0,\n    leading = false,\n    maxing = false,\n    trailing = true;\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT$1);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject$1(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  function invokeFunc(time) {\n    var args = lastArgs,\n      thisArg = lastThis;\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n      timeSinceLastInvoke = time - lastInvokeTime,\n      timeWaiting = wait - timeSinceLastCall;\n    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n  }\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n      timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n  }\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n  function debounced() {\n    var time = now(),\n      isInvoking = shouldInvoke(time);\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\nvar debounce_1 = debounce$1;\nvar debounce = debounce_1,\n  isObject = isObject_1;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n    trailing = true;\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\nvar throttle_1 = throttle;\nvar patchResizeHandler = function patchResizeHandler(resizeCallback, refreshMode, refreshRate, refreshOptions) {\n  switch (refreshMode) {\n    case 'debounce':\n      return debounce_1(resizeCallback, refreshRate, refreshOptions);\n    case 'throttle':\n      return throttle_1(resizeCallback, refreshRate, refreshOptions);\n    default:\n      return resizeCallback;\n  }\n};\nvar isFunction = function isFunction(fn) {\n  return typeof fn === 'function';\n};\nvar isSSR = function isSSR() {\n  return typeof window === 'undefined';\n};\nvar isDOMElement = function isDOMElement(element) {\n  return element instanceof Element || element instanceof HTMLDocument;\n};\nvar createNotifier = function createNotifier(onResize, setSize, handleWidth, handleHeight) {\n  return function (_a) {\n    var width = _a.width,\n      height = _a.height;\n    setSize(function (prev) {\n      if (prev.width === width && prev.height === height) {\n        // skip if dimensions haven't changed\n        return prev;\n      }\n      if (prev.width === width && !handleHeight || prev.height === height && !handleWidth) {\n        // process `handleHeight/handleWidth` props\n        return prev;\n      }\n      if (onResize && isFunction(onResize)) {\n        onResize(width, height);\n      }\n      return {\n        width: width,\n        height: height\n      };\n    });\n  };\n};\nvar ResizeDetector = /** @class */function (_super) {\n  __extends(ResizeDetector, _super);\n  function ResizeDetector(props) {\n    var _this = _super.call(this, props) || this;\n    _this.cancelHandler = function () {\n      if (_this.resizeHandler && _this.resizeHandler.cancel) {\n        // cancel debounced handler\n        _this.resizeHandler.cancel();\n        _this.resizeHandler = null;\n      }\n    };\n    _this.attachObserver = function () {\n      var _a = _this.props,\n        targetRef = _a.targetRef,\n        observerOptions = _a.observerOptions;\n      if (isSSR()) {\n        return;\n      }\n      if (targetRef && targetRef.current) {\n        _this.targetRef.current = targetRef.current;\n      }\n      var element = _this.getElement();\n      if (!element) {\n        // can't find element to observe\n        return;\n      }\n      if (_this.observableElement && _this.observableElement === element) {\n        // element is already observed\n        return;\n      }\n      _this.observableElement = element;\n      _this.resizeObserver.observe(element, observerOptions);\n    };\n    _this.getElement = function () {\n      var _a = _this.props,\n        querySelector = _a.querySelector,\n        targetDomEl = _a.targetDomEl;\n      if (isSSR()) return null;\n      // in case we pass a querySelector\n      if (querySelector) return document.querySelector(querySelector);\n      // in case we pass a DOM element\n      if (targetDomEl && isDOMElement(targetDomEl)) return targetDomEl;\n      // in case we pass a React ref using React.createRef()\n      if (_this.targetRef && isDOMElement(_this.targetRef.current)) return _this.targetRef.current;\n      // the worse case when we don't receive any information from the parent and the library doesn't add any wrappers\n      // we have to use a deprecated `findDOMNode` method in order to find a DOM element to attach to\n      var currentElement = findDOMNode(_this);\n      if (!currentElement) return null;\n      var renderType = _this.getRenderType();\n      switch (renderType) {\n        case 'renderProp':\n          return currentElement;\n        case 'childFunction':\n          return currentElement;\n        case 'child':\n          return currentElement;\n        case 'childArray':\n          return currentElement;\n        default:\n          return currentElement.parentElement;\n      }\n    };\n    _this.createResizeHandler = function (entries) {\n      var _a = _this.props,\n        _b = _a.handleWidth,\n        handleWidth = _b === void 0 ? true : _b,\n        _c = _a.handleHeight,\n        handleHeight = _c === void 0 ? true : _c,\n        onResize = _a.onResize;\n      if (!handleWidth && !handleHeight) return;\n      var notifyResize = createNotifier(onResize, _this.setState.bind(_this), handleWidth, handleHeight);\n      entries.forEach(function (entry) {\n        var _a = entry && entry.contentRect || {},\n          width = _a.width,\n          height = _a.height;\n        var shouldSetSize = !_this.skipOnMount && !isSSR();\n        if (shouldSetSize) {\n          notifyResize({\n            width: width,\n            height: height\n          });\n        }\n        _this.skipOnMount = false;\n      });\n    };\n    _this.getRenderType = function () {\n      var _a = _this.props,\n        render = _a.render,\n        children = _a.children;\n      if (isFunction(render)) {\n        // DEPRECATED. Use `Child Function Pattern` instead\n        return 'renderProp';\n      }\n      if (isFunction(children)) {\n        return 'childFunction';\n      }\n      if (isValidElement(children)) {\n        return 'child';\n      }\n      if (Array.isArray(children)) {\n        // DEPRECATED. Wrap children with a single parent\n        return 'childArray';\n      }\n      // DEPRECATED. Use `Child Function Pattern` instead\n      return 'parent';\n    };\n    var skipOnMount = props.skipOnMount,\n      refreshMode = props.refreshMode,\n      _a = props.refreshRate,\n      refreshRate = _a === void 0 ? 1000 : _a,\n      refreshOptions = props.refreshOptions;\n    _this.state = {\n      width: undefined,\n      height: undefined\n    };\n    _this.skipOnMount = skipOnMount;\n    _this.targetRef = createRef();\n    _this.observableElement = null;\n    if (isSSR()) {\n      return _this;\n    }\n    _this.resizeHandler = patchResizeHandler(_this.createResizeHandler, refreshMode, refreshRate, refreshOptions);\n    _this.resizeObserver = new window.ResizeObserver(_this.resizeHandler);\n    return _this;\n  }\n  ResizeDetector.prototype.componentDidMount = function () {\n    this.attachObserver();\n  };\n  ResizeDetector.prototype.componentDidUpdate = function () {\n    this.attachObserver();\n  };\n  ResizeDetector.prototype.componentWillUnmount = function () {\n    if (isSSR()) {\n      return;\n    }\n    this.observableElement = null;\n    this.resizeObserver.disconnect();\n    this.cancelHandler();\n  };\n  ResizeDetector.prototype.render = function () {\n    var _a = this.props,\n      render = _a.render,\n      children = _a.children,\n      _b = _a.nodeType,\n      WrapperTag = _b === void 0 ? 'div' : _b;\n    var _c = this.state,\n      width = _c.width,\n      height = _c.height;\n    var childProps = {\n      width: width,\n      height: height,\n      targetRef: this.targetRef\n    };\n    var renderType = this.getRenderType();\n    var typedChildren;\n    switch (renderType) {\n      case 'renderProp':\n        return render && render(childProps);\n      case 'childFunction':\n        typedChildren = children;\n        return typedChildren(childProps);\n      case 'child':\n        // @TODO bug prone logic\n        typedChildren = children;\n        if (typedChildren.type && typeof typedChildren.type === 'string') {\n          // child is a native DOM elements such as div, span etc\n          childProps.targetRef;\n          var nativeProps = __rest(childProps, [\"targetRef\"]);\n          return cloneElement(typedChildren, nativeProps);\n        }\n        // class or functional component otherwise\n        return cloneElement(typedChildren, childProps);\n      case 'childArray':\n        typedChildren = children;\n        return typedChildren.map(function (el) {\n          return !!el && cloneElement(el, childProps);\n        });\n      default:\n        return React.createElement(WrapperTag, null);\n    }\n  };\n  return ResizeDetector;\n}(PureComponent);\nfunction withResizeDetector(ComponentInner, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var ResizeDetectorHOC = /** @class */function (_super) {\n    __extends(ResizeDetectorHOC, _super);\n    function ResizeDetectorHOC() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.ref = createRef();\n      return _this;\n    }\n    ResizeDetectorHOC.prototype.render = function () {\n      var _a = this.props,\n        forwardedRef = _a.forwardedRef,\n        rest = __rest(_a, [\"forwardedRef\"]);\n      var targetRef = forwardedRef !== null && forwardedRef !== void 0 ? forwardedRef : this.ref;\n      return React.createElement(ResizeDetector, _assign({}, options, {\n        targetRef: targetRef\n      }), React.createElement(ComponentInner, _assign({\n        targetRef: targetRef\n      }, rest)));\n    };\n    return ResizeDetectorHOC;\n  }(Component);\n  function forwardRefWrapper(props, ref) {\n    return React.createElement(ResizeDetectorHOC, _assign({}, props, {\n      forwardedRef: ref\n    }));\n  }\n  var name = ComponentInner.displayName || ComponentInner.name;\n  forwardRefWrapper.displayName = \"withResizeDetector(\".concat(name, \")\");\n  return forwardRef(forwardRefWrapper);\n}\nvar useEnhancedEffect = isSSR() ? useEffect : useLayoutEffect;\nfunction useResizeDetector(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _a = props.skipOnMount,\n    skipOnMount = _a === void 0 ? false : _a,\n    refreshMode = props.refreshMode,\n    _b = props.refreshRate,\n    refreshRate = _b === void 0 ? 1000 : _b,\n    refreshOptions = props.refreshOptions,\n    _c = props.handleWidth,\n    handleWidth = _c === void 0 ? true : _c,\n    _d = props.handleHeight,\n    handleHeight = _d === void 0 ? true : _d,\n    targetRef = props.targetRef,\n    observerOptions = props.observerOptions,\n    onResize = props.onResize;\n  var skipResize = useRef(skipOnMount);\n  var localRef = useRef(null);\n  var ref = targetRef !== null && targetRef !== void 0 ? targetRef : localRef;\n  var resizeHandler = useRef();\n  var _e = useState({\n      width: undefined,\n      height: undefined\n    }),\n    size = _e[0],\n    setSize = _e[1];\n  useEnhancedEffect(function () {\n    if (isSSR()) {\n      return;\n    }\n    var notifyResize = createNotifier(onResize, setSize, handleWidth, handleHeight);\n    var resizeCallback = function resizeCallback(entries) {\n      if (!handleWidth && !handleHeight) return;\n      entries.forEach(function (entry) {\n        var _a = entry && entry.contentRect || {},\n          width = _a.width,\n          height = _a.height;\n        var shouldSetSize = !skipResize.current && !isSSR();\n        if (shouldSetSize) {\n          notifyResize({\n            width: width,\n            height: height\n          });\n        }\n        skipResize.current = false;\n      });\n    };\n    resizeHandler.current = patchResizeHandler(resizeCallback, refreshMode, refreshRate, refreshOptions);\n    var resizeObserver = new window.ResizeObserver(resizeHandler.current);\n    if (ref.current) {\n      // Something wrong with typings here...\n      resizeObserver.observe(ref.current, observerOptions);\n    }\n    return function () {\n      resizeObserver.disconnect();\n      var patchedResizeHandler = resizeHandler.current;\n      if (patchedResizeHandler && patchedResizeHandler.cancel) {\n        patchedResizeHandler.cancel();\n      }\n    };\n  }, [refreshMode, refreshRate, refreshOptions, handleWidth, handleHeight, onResize, observerOptions, ref.current]);\n  return _assign({\n    ref: ref\n  }, size);\n}\nexport { ResizeDetector as default, useResizeDetector, withResizeDetector };","map":null,"metadata":{},"sourceType":"module"}